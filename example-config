# Example and explanation of a config file for task made in pisek
# Parsed by configparser.RawConfigParser with checking of unused keys
# See more here: https://docs.python.org/3.10/library/configparser.html

# Move 'config' into a task folder 


[task]

# Task version
# - v1 - Old version, currently not supported. Use 'pisek update' to update to v2.
# - v2 - Current version, Added solution sections and redone test sections.
version=v2

# Name of task (for automatic CMS import)
name=blecha

contest_type=cms
# Environment for which is task developed
# kasiopea (default) / cms

task_type=communication
# Task type:
# - batch (default)
# - communication

solutions_subdir=solutions/
# Try to find solutions in this folder relative to config
# Default: .
static_subdir=sample_tests/
# Try to find static inputs and outputs in this folder relative to config
# Default: .
data_subdir=tests/
# Directory for automatically generated files (inputs, outputs, ...)
# Default: data/

tests = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)


[tests]

in_gen=src/gen
# Source code of generator (without suffix)

checker=check
# Program (without suffix) that validates inputs
# No value means no checking

out_check=diff
# Describes how to check outputs
#   - diff: checks that contestant output equals correct output (ignores whitespace) (default)
#   - judge: if there can be multiple solutions, checks with program (called 'judge')
# In communication, only judge is allowed

out_judge=judge
# Only for out_check=judge
# Source code of judge (without suffix)

judge_needs_in=0
judge_needs_out=0
# Only for out_check=judge
# Set to 1 if judge needs input/output
# Defaults to 1

stub=src/stub
# Only for C++ CMS tasks
# Link each solution with given program (without suffix)
# Used commonly for interactive tasks

in_mode = ??? (ignored)
out_mode = ??? (ignored)
out_format = ??? (ignored)
online_validity = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)


[test01]
# Section for each subtask (indexed from one)

name=Subtask 1
# Name of subtask (optional)

points=3
# Number of points (<int>)

in_globs=01*.in
# Which new inputs are introduced in this subtask.
# Supports expansion of * and ? as in shell
# Defaults to {subtask_number:02}*.in

file_name = ??? (ignored)
# Ignored (because of compatibility with KSP/Kasiopea web)

predecessors =
# Space separated list of subtasks easier than this subtask
# Inputs from these subtasks are included into this subtask as well
# Defaults to previous subtask (or nothing if subtask has number <= 1)

[test00]
# Section for samples subtasks
# Can be omitted and has the following defaults
name=Samples
points=0
in_globs=sample*.in
predecessors=

[solution_correct]
# Section for each solution

source=solve
# Filename of the program (without suffix)
# Defaults to name of the section without "solution_" (in this case to "correct")

primary=yes
# Use this solution to generate correct outputs?
# Exactly one solution has to be set to primary
# (or zero if there are no solutions in config)
# Defaults to no

points=10
# Points that program should get or X for any number of points
# Defaults to X

points_above=5
points_below=7
# Upper and lower bounds on points
# Default to X
# Cannot be set simultaneously with points

subtasks=X10
# String describing result on each subtask:
# 1 - success
# 0 - fail
# P - partial success
# W - wrong answer
# ! - runtime error
# T - timeout
# X - any result
#
# Defaults to 11... for primary solution or XX... otherwise

[limits]
# Resource limits for various programs: all of them are called KEY_LIMIT,
# where KEY is one of:
#   in_gen      Input generator
#   checker     Checker
#   judge       Judge
#   solve       Primary solution
#   sec_solve   Secondary solution usually subject to much less strict limits.
# and LIMIT is one of:
#   time_limit  Execution time limit [seconds]
#   clock_limit Wall clock time limit [seconds]
#   mem_limit   Memory limit [KB]
#   process_limit   Maximum number of processes -- at the moment,
#           limits greater than 1 are interpreted as "unlimited".
#           Please keep in mind that killing of multiple processes
#           upon errors is inherently unreliable.
# Defaults:
#   time_limit     360s
#   clock_limit    360s
#   mem_limit      unlimited
#   process_limit  1
solve_time_limit=3

input_max_size=20
# Maximal input size [MB]
# Defaults to 50 (only in Kasiopea)

output_max_size=5
# Maximal input size [MB]
# Defaults to 10 (only in Kasiopea)
